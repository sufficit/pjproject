# .github/workflows/pjproject-build.yml
# This workflow will be placed in the sufficit/pjproject repository

name: Build PJSIP for Windows x64 (using Sufficit Opus)

on:
  push:
    branches: [ "master", "main" ] # Assuming main or master is the primary branch for pjproject

jobs:
  build:
    runs-on: windows-latest
    
    steps:
    - name: 1. Checkout PJSIP Repository
      uses: actions/checkout@v4
      with:
        repository: pjsip/pjproject # Explicitly checkout pjproject here
        path: . # Checkout to the root of the workspace

    - name: 2. Download and Extract Pre-compiled Opus Libraries and Headers from Sufficit/Opus
      shell: pwsh
      run: |
        $releaseApiUrl = "https://api.github.com/repos/sufficit/opus/releases/latest"
        $response = Invoke-RestMethod -Uri $releaseApiUrl
        
        # Find the asset that contains "opus" and ends with ".zip"
        # This is robust to potential name variations like "Release.zip", "opus-x64.zip", etc.
        $asset = $response.assets | Where-Object { $_.name -like '*opus*.zip' } | Select-Object -First 1
        $assetUrl = $asset.browser_download_url
        $assetName = $asset.name

        if (-not $assetUrl) {
            Write-Host "##[error]Error: No suitable Opus .zip asset found in the latest release of sufficit/opus. Looked for names containing 'opus' and ending with '.zip'."
            exit 1
        }

        $tempDir = New-Item -ItemType Directory -Path "opus-extracted" -Force
        $zipPath = Join-Path -Path $tempDir -ChildPath $assetName

        Write-Host "Downloading Opus release from: $assetUrl (Asset Name: $assetName)"
        Invoke-WebRequest -Uri $assetUrl -OutFile $zipPath

        Write-Host "Extracting $zipPath to $tempDir"
        Expand-Archive -Path $zipPath -DestinationPath $tempDir -Force

        # Define target paths relative to pjproject repository root
        # PJSIP usually puts its compiled libs directly in a 'lib' folder at the root
        # We need to create this directory if it doesn't exist, as it's not part of the source tree
        $pjsipLibDir = "lib" 
        $pjIncludeOpusDir = "pjlib/include/pj/opus"

        # Ensure target directories exist before copying
        New-Item -ItemType Directory -Path $pjsipLibDir -Force
        New-Item -ItemType Directory -Path $pjIncludeOpusDir -Force

        # Copy opus.lib
        # Search for opus.lib anywhere in the extracted directory, as structure might vary (e.g., in a 'Release' subfolder)
        $foundOpusLib = Get-ChildItem -Path $tempDir -Filter "opus.lib" -Recurse | Select-Object -First 1

        if ($foundOpusLib) {
            Copy-Item -Path $foundOpusLib.FullName -Destination $pjsipLibDir
            Write-Host "Copied opus.lib from $($foundOpusLib.FullName) to $pjsipLibDir"
        } else {
            Write-Host "##[error]Error: opus.lib not found within the extracted contents of the Opus release. Please check the structure of the Opus release zip."
            exit 1
        }

        # Copy Opus headers
        # Search for opus.h and then get its parent directory
        $foundOpusHeadersDir = Get-ChildItem -Path $tempDir -Filter "opus.h" -Recurse | Select-Object -ExpandProperty DirectoryName | Select-Object -First 1

        if ($foundOpusHeadersDir) {
            Copy-Item -Path (Join-Path -Path $foundOpusHeadersDir -ChildPath "*.h") -Destination $pjIncludeOpusDir
            Write-Host "Copied Opus headers from $($foundOpusHeadersDir) to $pjIncludeOpusDir"
        } else {
            Write-Host "##[warning]Warning: Opus 'opus.h' header file not found within the extracted contents of the Opus release. Headers might be missing or in an unexpected location."
        }

    - name: 3. Create PJSIP config_site.h
      shell: pwsh
      run: |
        # This content defines PJSIP's configuration, including Opus support and Windows x64 specific macros.
        # All blank lines have been removed to prevent potential YAML parsing issues with literal blocks.
        $configSiteContent = @"
# =================================================================================================
# PJSIP CUSTOM CONFIGURATION FILE
#
# Author: Hugo Castro de Deco, Sufficit
# Collaboration: Gemini AI for Google
# Date: June 15, 2025
# Version: 2
#
# This file provides custom configuration definitions for PJSIP,
# including platform-specific settings and feature flags.
# =================================================================================================
// Define Windows version for API compatibility (e.g., for WASAPI functions)
#define _WIN32_WINNT 0x0A00 // Target Windows 10 (or later for _WIN32_WINNT_WIN10) - 0x0601 for Win 7, 0x0600 for Win Vista
#define PJ_CONFIG_WIN_AUTO   1
#define PJ_IS_BIG_ENDIAN     0
#define PJ_HAS_OPUS_CODEC    1
// To prevent WinVer redefinition issue with VS2022
#define PJ_DONT_NEED_WIN32_VER_HACKS 1
// Explicitly define platform/architecture for broader compatibility
#define _WIN32
#define _M_X64 
#include <pj/config_site_sample.h>
"@
        Set-Content -Path "pjlib/include/pj/config_site.h" -Value $configSiteContent

    - name: 4. Add MSBuild to path
      uses: microsoft/setup-msbuild@v2

    - name: 5. Create build_pjsip.ps1
      shell: pwsh
      run: |
        # This script builds the PJSIP solution using MSBuild.
        # It's created dynamically because it needs to be present in the runner's workspace.
        $buildScriptContent = @"
# =================================================================================================
# BUILD SCRIPT FOR PJSIP SOLUTION (CALLED BY GITHUB ACTIONS WORKFLOW)
#
# Author: Hugo Castro de Deco, Sufficit
# Collaboration: Gemini AI for Google
# Date: June 15, 2025
# Version: 1
#
# This script builds the PJSIP solution using MSBuild, ensuring the correct configuration
# and platform are applied.
# =================================================================================================

param (
    [string]\$SlnFile # Path to the PJSIP solution file, e.g., pjproject/pjproject-vs14.sln
)

\$solutionPath = \$SlnFile
\$configuration = "Release"
\$platform = "x64" # Targetting x64

\$msbuildPath = "msbuild.exe"

Write-Host "Building PJSIP solution: \$solutionPath"
Write-Host "Configuration: \$configuration"
Write-Host "Platform: \$platform"

try {
    & \$msbuildPath \$solutionPath /p:Configuration=\$configuration /p:Platform=\$platform /m /t:Rebuild
    if (\$LASTEXITCODE -ne 0) {
        Write-Host "##[error]MSBuild failed with exit code \$LASTEXITCODE."
        exit 1
    }
} catch {
    Write-Host "##[error]An error occurred during MSBuild execution: \$(\$_.Exception.Message)"
    exit 1
}
"@
        New-Item -Path "scripts" -ItemType Directory -Force # Ensure scripts directory exists
        Set-Content -Path "scripts/build_pjsip.ps1" -Value $buildScriptContent

    - name: 6. Create patch.ps1
      shell: pwsh
      run: |
        # This script patches the pjmedia_codec.vcxproj to ensure x64 specific preprocessor definitions.
        # It's created dynamically because it needs to be present in the runner's workspace.
        $patchScriptContent = @"
# =================================================================================================
# PATCH SCRIPT FOR PJSIP PROJECT FILES (CALLED BY GITHUB ACTIONS WORKFLOW)
#
# Author: Hugo Castro de Deco, Sufficit
# Collaboration: Gemini AI for Google
# Date: June 15, 2025
# Version: 6 (Corrected SelectSingleNode with XmlNamespaceManager)
#
# This script is intended to apply specific patches to PJSIP project files,
# such as adjusting include paths or build settings.
# =================================================================================================

param (
    [Parameter(Mandatory=\$true)]
    [string]\$ProjFile
)

Write-Host "Executing patch script for: \$ProjFile"

try {
    [xml]\$projXml = Get-Content \$ProjFile

    \$nsManager = New-Object System.Xml.XmlNamespaceManager(\$projXml.NameTable)
    \$nsManager.AddNamespace("msbuild", "http://schemas.microsoft.com/developer/msbuild/2003")

    \$clCompileNode = \$projXml.SelectSingleNode("//msbuild:ItemDefinitionGroup[contains(@Condition, 'Release') and contains(@Condition, 'x64')]/msbuild:ClCompile", \$nsManager)

    if (\$clCompileNode) {
        \$preprocessorDefinitionsNode = \$clCompileNode.SelectSingleNode("./msbuild:PreprocessorDefinitions", \$nsManager)

        if (\$preprocessorDefinitionsNode) {
            \$existingDefinitions = \$preprocessorDefinitionsNode.'#text'
            \$newDefinitions = "_M_X64;_WIN64;\$existingDefinitions"
            \$preprocessorDefinitionsNode.'#text' = \$newDefinitions
            Write-Host "Updated PreprocessorDefinitions for Release|x64 in \$ProjFile."
            Write-Host "New definitions: \$(\$preprocessorDefinitionsNode.'#text')"
        } else {
            \$newDefNode = \$projXml.CreateElement("PreprocessorDefinitions", \$nsManager.LookupNamespace("msbuild"))
            \$newDefNode.'#text' = "_M_X64;_WIN64"
            \$clCompileNode.AppendChild(\$newDefNode)
            Write-Host "Added PreprocessorDefinitions for Release|x64 in \$ProjFile."
        }

        \$projXml.Save(\$ProjFile)
        Write-Host "Successfully patched \$ProjFile."
    } else {
        Write-Host "##[warning]Warning: Could not find Release|x64 configuration in \$ProjFile. No patch applied."
    }

} catch {
    Write-Host "##[error]Error patching \$(\$ProjFile): \$(\$_.Exception.Message)"
    exit 1
}
"@
        New-Item -Path "scripts" -ItemType Directory -Force # Ensure scripts directory exists
        Set-Content -Path "scripts/patch.ps1" -Value $patchScriptContent

    - name: 7. Patch PJSIP pjmedia_codec.vcxproj for x64 defines
      shell: pwsh
      run: |
        $patch_script_path = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "scripts/patch.ps1"
        # The vcxproj is now in pjmedia/build relative to the workspace root
        $pjmedia_codec_vcxproj_path = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "pjmedia/build/pjmedia_codec.vcxproj"
        Write-Host "Executing patch script: $patch_script_path on $pjmedia_codec_vcxproj_path"
        pwsh.exe -File $patch_script_path -ProjFile $pjmedia_codec_vcxproj_path

    - name: 8. Build PJSIP Solution
      shell: pwsh
      run: |
        $sln_path = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "pjproject-vs14.sln"
        $script_path = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "scripts/build_pjsip.ps1"
        
        Write-Host "Executing script: $script_path"
        pwsh.exe -File $script_path -SlnFile $sln_path

    - name: 9. Upload PJSIP Libraries as Artifact
      uses: actions/upload-artifact@v4
      with:
        name: pjsip-x64-libraries
        path: |
          lib/*.lib
          pjlib/include/
          pjlib-util/include/
          pjnath/include/
          pjmedia/include/
          pjsip/include/
          # Include specific headers if needed for consumption by other projects
          # For example, all *.h files in relevant subdirectories
        retention-days: 7 # Retain artifacts for 7 days