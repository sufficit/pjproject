# GitHub Actions Workflow: PJSIP Build for Windows
#
# This workflow automates the compilation of the PJSIP project for Windows (x64).
# It is triggered on pushes to the 'main' branch and automatically
# creates a tag and release for each successful build on 'main'. It also continues to be
# triggered by manually pushed version tags. Build artifacts are named
# using the UTC date and time of the build.
#
# The main change is the integration of pre-compiled Opus libraries (assuming that
# they are provided by the same company 'sufficit' via GitHub Releases), instead of
# installing system development packages or compiling Opus internally.
#
# Action Version: 1.0.24
# Last Updated: 2025-06-16
# Description of Changes:
#   - Focused workflow on Windows build only by commenting out Linux and Linux ARM jobs.
#   - **Changed 'config_site.h' and 'pjsip_extra_defines.h' generation to direct file copying**
#     **from pre-existing files in 'scripts/' to resolve persistent C preprocessor errors.**
#   - Ensured all comments in the code are in English.
#   - Updated the repository path to 'sufficit/pjproject' in the initial checkout.
#   - Implemented downloading of pre-compiled Opus artifacts from the 'sufficit/opus' repository
#     (via GitHub Releases) in each PJSIP build job, with enhanced logic for naming and extraction.
#   - Removed `libopus-dev` dependencies from package installers.
#   - Adjusted compilation flags (CFLAGS, LDFLAGS) and PJSIP build commands
#     (configure/msbuild) to point to the downloaded Opus artifacts.
#   - Added 'jq' installation for parsing GitHub API JSON for release downloads.
#   - Included `chown` command in Docker build step to resolve permission issues for artifacts.
#   - Maintained all previous build and release functionalities.
#   - Fixed YAML syntax error by simplifying 'run' commands for PowerShell scripts.
#   - Modified MSBuild invocation in `scripts/build_pjsip.ps1` (external script) to target 'Build'
#     instead of 'Rebuild' for potentially problematic projects, as 'Rebuild' target errors were observed.
#
# For more information on GitHub Actions: https://docs.github.com/en/actions
# For PJSIP build instructions:
#   - Windows: https://docs.pjsip.org/en/latest/get-started/windows/build_instructions.html

# Workflow name that will appear in GitHub Actions
name: Build PJSIP for Windows (with pre-compiled Opus)

# Defines when the workflow will be executed
on:
  # Triggers the workflow on 'push' events to the 'main' branch
  push:
    branches:
      - main
    tags:
      - 'v*.*.*' # Example: v1.0.0, v1.2.3 (still supported for manual tagging)

  # Allows you to manually run this workflow from the GitHub "Actions" tab
  workflow_dispatch:

# Definition of the jobs to be executed
jobs:
  # Job for Windows compilation
  build-windows:
    name: Build on Windows
    # Uses the latest Windows Server version, which has Visual Studio and MSBuild pre-installed
    runs-on: windows-latest

    outputs:
      build_version: ${{ steps.date.outputs.BUILD_VERSION }} # Output the build version for other jobs

    steps:
      # Step 0: Capture build date and time to use as version
      - name: Get current date and time
        id: date
        run: |
          # Formats the date and time as YYYYMMDD-HHMMSS (UTC)
          $build_version = (Get-Date -UFormat %Y%m%d-%H%M%S)
          echo "BUILD_VERSION=$build_version" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "BUILD_VERSION=$build_version" | Out-File -FilePath $env:GITHUB_OUTPUT -Append # Output for job dependencies
        shell: powershell

      # Step 1: Checkout the PJSIP repository
      - name: Checkout PJSIP Repository
        uses: actions/checkout@v4
        with:
          repository: sufficit/pjproject # Defining the correct repository
          path: . # Checkout to the root of the workspace
          submodules: recursive # If there are submodules, they will also be cloned

      # Step 2: Find and download the latest Opus release for Windows (Execute script)
      - name: Find and download latest Opus Windows release
        id: download_opus_release_windows
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: scripts/download_opus_windows.ps1 # Directly call the script from the 'scripts' folder
        shell: pwsh

      # Debugging Step: List contents of opus_temp after extraction
      - name: Debug - List Opus extracted contents (Windows)
        run: |
          Get-ChildItem -Path external_libs/opus_temp -Recurse | Select-Object FullName, Name, Mode, Length
        shell: pwsh

      # Step 3: Copy pjsip_extra_defines.h from scripts folder
      - name: Copy PJSIP extra defines header
        shell: pwsh
        run: Copy-Item -Path "scripts/pjsip_extra_defines_content.h" -Destination "pjlib/include/pj/pjsip_extra_defines.h" -Force

      # Step 4: Copy config_site.h from scripts folder
      - name: Copy PJSIP config_site.h
        shell: pwsh
        run: Copy-Item -Path "scripts/config_site_content.h" -Destination "pjlib/include/pj/config_site.h" -Force

      # Step 5: Add MSBuild to path
      - name: Add MSBuild to path
        uses: microsoft/setup-msbuild@v2

      # Step 6: Patch PJSIP pjmedia_codec.vcxproj for x64 defines
      - name: Patch PJSIP pjmedia_codec.vcxproj for x64 defines
        shell: pwsh
        run: |
          $pjmedia_codec_vcxproj_path = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "pjmedia/build/pjmedia_codec.vcxproj"
          Write-Host "Executing patch script: scripts/patch.ps1 on $pjmedia_codec_vcxproj_path"
          scripts/patch.ps1 -ProjFile $pjmedia_codec_vcxproj_path # Directly call the script

      # Step 7: Build PJSIP Solution
      # This step assumes 'scripts/build_pjsip.ps1' correctly invokes MSBuild
      # on the solution file and handles any project-specific build targets.
      - name: Build PJSIP Solution
        shell: pwsh
        run: |
          $sln_path = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "build/vs/pjproject-vs14.sln" # Ensure this path is correct
          Write-Host "Executing script: scripts/build_pjsip.ps1 with solution file: $sln_path"
          scripts/build_pjsip.ps1 -SlnFile $sln_path # Directly call the script

      # Step 8: Upload PJSIP Libraries as Artifact
      - name: Upload PJSIP Libraries as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: pjsip-x64-libraries
          path: |
            lib/*.lib
            pjlib/include/
            pjlib-util/include/
            pjnath/include/
            pjmedia/include/
            pjsip/include/
            pjsip-apps/bin/*.exe # Include executables as well
          retention-days: 7 # Retain artifacts for 7 days

  # Job to create GitHub Release
  create-release:
    name: Create GitHub Release
    # This job runs only if all build jobs succeed
    needs: [build-windows]
    runs-on: ubuntu-latest

    steps:
      # Step 0: Set the tag name based on the build version
      # We need to get the BUILD_VERSION from one of the previous jobs.
      # Since all jobs have the same BUILD_VERSION, we can pick one, e.g., build-windows.
      - name: Set Release Tag Name
        id: set_tag
        run: |
          echo "RELEASE_TAG=build-${{ needs.build-windows.outputs.build_version }}" >> "$GITHUB_ENV"

      # Step 1: Download all build artifacts
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          # Downloads all artifacts from the current workflow run
          path: ./artifacts

      # Step 2: List Downloaded Artifacts (for debugging)
      - name: List Downloaded Artifacts
        run: ls -R ./artifacts

      - name: Prepare Windows Release Zip
        if: needs.build-windows.result == 'success' # Only run if windows build succeeded
        shell: bash # Use bash for zip command
        run: |
          ARTIFACT_DIR="./artifacts/pjsip-x64-libraries"
          ZIP_FILE_NAME="pjsip-windows-x64-${{ needs.build-windows.outputs.build_version }}.zip"
          echo "Artifact directory: $ARTIFACT_DIR"
          echo "Zip file name: $ZIP_FILE_NAME"
          cd "$ARTIFACT_DIR"
          zip -r "../$ZIP_FILE_NAME" . # Zip contents of pjsip-x64-libraries into a zip file in the parent (artifacts) folder
          echo "WINDOWS_RELEASE_ZIP=./artifacts/$ZIP_FILE_NAME" >> "$GITHUB_ENV"

      # Step 3: Create Release
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          # Define the tag name for the release. This action will create the tag if it doesn't exist.
          tag_name: ${{ env.RELEASE_TAG }}
          # Define the release name
          name: Automated Build Release ${{ env.RELEASE_TAG }}
          # Provide a body for the release notes
          body: |
            Automated build for branch `main`.
            Build Date (UTC): `${{ needs.build-windows.outputs.build_version }}`
          # Set 'prerelease' to true if you want these auto-generated releases to be marked as pre-releases.
          # Remove or set to 'false' if you want them as full releases.
          # prerelease: true
          files: |
            ${{ env.WINDOWS_RELEASE_ZIP }}
        env:
          # GITHUB_TOKEN is automatically provided by GitHub Actions for authentication
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
